<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAQAAEABAAoAQAANgAAABAQAAABAAgAaAUAAF4BAAAQEAAAAQAgAGgEAADGBgAAKAAAABAA
        AAAgAAAAAQAEAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICA
        AACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAjInd3Z2VkJCI3d3hnZnZAI393j4Z2
        dHACj4b/h3xnAAMnM3iId3AAAHN3i4t7AAAIN5iId7mAAAe3OLi4mLAAB5efiHuBEAALc3i4iTUwAAS3
        k4i1MUAAAUFhEVNDEAACUhdTBTUAAAAIAIdxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAIAD
        AACABwAAwA8AAIAHAACABwAAgAcAAIAHAACABwAAgAcAAIAPAADgPwAA//8AAP//AAAoAAAAEAAAACAA
        AAABAAgAAAAAAAABAAAAAAAAAAAAAAABAAAAAQAAAAAAADIyMgBROhMAVT4YAApvLQALcCwAFnwmABB1
        KQAAZTIABGkwABBxPgBZQx0AX0opAGJLJgBjTSoAf14nAHFXKgBrVTAAc146AHtiOAAyMmUAHnhLAC1h
        egApcX0AVH5VAHxmQwCAXSIAhmQsAIloMACLazQAjGw1AI9vOgCScz4AknQ/AIVwTQCVd0MAmHpIAJt+
        TQCNeVcAhHdYAFKCWgBenn4Ac4R+AJ+CUgCkilwAlYFgAJKObACeimoAr5hvAKiWcQC1nngAMGqDAEBs
        ngBCeaoAUnamAGWggQBuqIsARYW1AEyKtQBqlbkAKY30AD6a8wA4mvsASJHBAFCUwgBwpNMAf63VAEyk
        /ABfrvwAbK/0AHO4/ACRkawAmJixAMSzlQDHtZgA0sKqAJKvxACDqtUAjLrYAL/ZzQCHwvwAlcT2AJvN
        /QCnz/UArtf9ANDj2ADp4tcA8OvkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAUICAguLy0mIhkSEQ0LAgwHCRUpGDAySisk
        IR4bGgMABgQ4/zcxS/9JJCMfHg8OAAAHVf9PKFf/ViwkIR4QAAAABgoXMxYqTEJBOycTAAAAAAA6NTQ2
        UVBGREM9AAAAAABOOTU0TVJQRkRDPkUAAAAAQDk1NFNSUEZEQz48AAAAAD85NTRUUlBGREMUFAAAAABA
        OTU0U1JQRkQUFBQAAAAAATk1NBRSUEYUFBQUAAAAAAEBAQEUFBQUFBQUFAAAAAABAQEBFBQUFBQUFAAA
        AAAAAABIAQFHRxQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAB
        AACAAwAAgAcAAMAPAACABwAAgAcAAIAHAACABwAAgAcAAIAHAACADwAA4D8AAP//AAD//wAAKAAAABAA
        AAAgAAAAAQAgAAAAAABABAAAAAAAAAAAAAAAAAAAAAAAAAtwLP8AZTL/AGUy/wBlMv+Sjmz/nopq/5WB
        YP+NeVf/hXBN/3xmQ/9zXjr/a1Uw/2JLJv9ZQx3/UToT/0kxC98Rdin/BGkw/x54S/9enn7/VH5V/6+Y
        b/+1nnj/x7WY/5+CUv+Ye0n/knQ//4xsNf+GZCz/gF0i/1U+GP9MNQ9/F30m/wpvLf9uqIv//////2Wg
        gf+olnH/0sKq///////Es5X/m35N/5V3Q/+Pbzr/iWgw/39eJ/9ZQhzvUDkTEB2DI2AQdSr/0OPY////
        //+/2c3/UoJa//Dr5P//////6eLX/6SKXP+Yekj/knM+/4trNP9xVyr/XUYhYAAAAAAAAAAAFnwn/xBx
        Pv8pcX3/MGqD/y1hev9zhH7/kq/E/3+t1f9wpNP/apW5/4R3WP97Yjj/alQvcAAAAAAAAAAAAAAAAEiR
        wS9EhbL0Qnmq/0Bsnv9Sdqb/lcT2/4fC/P9zuPz/X678/0yk/P87mPP6WXGAVwAAAAAAAAAAAAAAAAAA
        AABIkcGfRYW1/0J5qv9AbJ7/g6rV/5vN/f+Hwvz/c7j8/1+u/P9MpPz/OJr7/yWI8KsAAAAAAAAAAAAA
        AAAAAAAASI+/80WFtf9Cear/QGye/6fP9f+bzf3/h8L8/3O4/P9frvz/TKT8/zia+/8li/T6AAAAAAAA
        AAAAAAAAAAAAAEiRwf9FhbX/Qnmq/0Bsnv+u1/3/m839/4fC/P9zuPz/X678/0yk/P8yMmX/MjJl/wAA
        AAAAAAAAAAAAAAAAAABIj7/zRYW1/0J5qv9AbJ7/p8/1/5vN/f+Hwvz/c7j8/1+u/P8yMmX/MjJl/zIy
        Zf8AAAAAAAAAAAAAAAAAAAAAMjIy/0WFtf9Cear/QGye/zIyZf+bzf3/h8L8/3O4/P8yMmX/MjJl/zIy
        Zf8yMmX/AAAAAAAAAAAAAAAAAAAAADIyMv8yMjL/MjIy/zIyMv8yMmX/MjJl/zIyZf8yMmX/MjJl/zIy
        Zf8yMmX/MjJl/wAAAAAAAAAAAAAAAAAAAAAyMjL/MjIy/zIyMv8yMjL/MjJl/zIyZf8yMmX/MjJl/zIy
        Zf8yMmX/MjJl/zIyZTAAAAAAAAAAAAAAAAAAAAAAAAAAADIyZUAyMmWAMjIy/zIyMv8yMmWIMjJliDIy
        Zf8yMmX/MjJlYDIyZRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAgAMAAIAH
        AACABwAAgAcAAIAHAACABwAAgAcAAIAHAACABwAAwA8AAP//AAD//wAA
</value>
  </data>
</root>